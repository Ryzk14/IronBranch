# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Automation Tests Runs

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:

#  job1:
#    name: Setups Report
#    runs-on: ubuntu-latest
#    steps:
#
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#         python-version: 3.11
#
#      - name: Install allure tool
#        run: |
#          npm install -g allure-commandline --save-dev
#
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          python -m pip install pytest
#          python -m pip install allure-pytest
#
#      - name: Clean docs
#        run: rm -r docs
#
#      - name: Save Allure Result
#        continue-on-error: true
#        run: pytest tests --alluredir=allure_results
#
#      - name: Define Enviroment
#        run: |
#          sudo touch allure_results/environment.properties
#          echo -e 'Browser=Chrome\nBrowser.Version=114.0\nStand=Localhost' | sudo tee -a allure_results/environment.properties
#
#      - name: Genereta Allure Report
#        run: allure generate allure_results -o docs
#
#      - name: Generate Executors
#        run: |
#          truncate -s 0 docs/widgets/executors.json
#          echo '[{"name": "GitHub Actions","type": "github actions","url": "http://example.org","buildOrder": 13,"buildName": "Demo Session","buildUrl": "http://example.org/build#13","reportUrl": "http://example.org/build#13/AllureReport","reportName": "Demo allure report"}]' >> docs/widgets/executors.json
#          cat docs/widgets/executors.json
#
#      - name: Build with Jekyll
#        uses: actions/jekyll-build-pages@v1
#        with:
#          source: ./docs
#          destination: ./_site
#
#      - name: Upload artifact
#        uses: actions/upload-pages-artifact@v1
#
#  job2:
#   name: Pytest Run Test
#   runs-on: ubuntu-latest
#   steps:
#
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#         python-version: 3.11
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          python -m pip install pytest
#
#      - name: Run Tests
#        continue-on-error: true
#        run: |
#          pytest -v tests
#  job3:
#      name: Save Allure Runs History
#      runs-on: ubuntu-latest
#      needs: job1
#      permissions:
#        contents: write
#      steps:
#
#        - name: Checkout code
#          uses: actions/checkout@v2
#
#        - name: Setup Python
#          uses: actions/setup-python@v2
#          with:
#            python-version: 3.11
#
#        - name: Install allure tool
#          run: |
#            npm install -g allure-commandline --save-dev
#
#        - name: Install dependencies
#          run: |
#            python -m pip install --upgrade pip
#            python -m pip install pytest
#            python -m pip install allure-pytest
#
#        - name: Clean "docs" folder
#          run: rm -r docs
#
#        - name: Save Allure Result to the "allure_results" folder
#          continue-on-error: true
#          run: pytest tests --alluredir=allure_results
#
#        - name: Generate allure report and save to the "doc" folder
#          run: allure generate allure_results -o docs
#
#        - name: Clean "allure_results" folder
#          run: rm -r allure_results
#
#        - name: Copy History
#          run: |
#                mkdir -p ./allure_results/history
#                cp -r ./docs/history/* ./allure_results/history/
#
#        - name: Set up Git
#          run: |
#               git config --local user.email Ryzhko14@gmail.com
#               git config --local user.name Ryzk14
#
#        - name: Commit and Push
#          run: |
#               git add ./allure_results/history/
#               git commit -m "Automated commit by GitHub Actions"
#               git push
  job4:
    name: Setup Jmeter Load Script
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v2



      - name: setup jmeter
        run: |
          cd ./apache-jmeter-5.5
          cd bin
          chmod +x jmeter.sh
          ./jmeter.sh -n -t "apache-jmeter-5.5/jmx/main.jmx" -l "jmeter-report/report.csv"
          ./jmeter.sh -g "jmeter-report/report.csv" -o "jmeter-html"

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./Jmeter/html
          destination: ./_site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1

#  Allure_Report:
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
#    runs-on: ubuntu-latest
#    needs: job1
#    steps:
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v2
